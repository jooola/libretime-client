/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PatchedImportedPodcast model module.
 * @module model/PatchedImportedPodcast
 * @version 2.0.0
 */
class PatchedImportedPodcast {
    /**
     * Constructs a new <code>PatchedImportedPodcast</code>.
     * @alias module:model/PatchedImportedPodcast
     */
    constructor() { 
        
        PatchedImportedPodcast.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PatchedImportedPodcast</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatchedImportedPodcast} obj Optional instance to populate.
     * @return {module:model/PatchedImportedPodcast} The populated <code>PatchedImportedPodcast</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatchedImportedPodcast();

            if (data.hasOwnProperty('item_url')) {
                obj['item_url'] = ApiClient.convertToType(data['item_url'], 'String');
            }
            if (data.hasOwnProperty('auto_ingest')) {
                obj['auto_ingest'] = ApiClient.convertToType(data['auto_ingest'], 'Boolean');
            }
            if (data.hasOwnProperty('auto_ingest_timestamp')) {
                obj['auto_ingest_timestamp'] = ApiClient.convertToType(data['auto_ingest_timestamp'], 'Date');
            }
            if (data.hasOwnProperty('album_override')) {
                obj['album_override'] = ApiClient.convertToType(data['album_override'], 'Boolean');
            }
            if (data.hasOwnProperty('podcast')) {
                obj['podcast'] = ApiClient.convertToType(data['podcast'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} item_url
 */
PatchedImportedPodcast.prototype['item_url'] = undefined;

/**
 * @member {Boolean} auto_ingest
 */
PatchedImportedPodcast.prototype['auto_ingest'] = undefined;

/**
 * @member {Date} auto_ingest_timestamp
 */
PatchedImportedPodcast.prototype['auto_ingest_timestamp'] = undefined;

/**
 * @member {Boolean} album_override
 */
PatchedImportedPodcast.prototype['album_override'] = undefined;

/**
 * @member {String} podcast
 */
PatchedImportedPodcast.prototype['podcast'] = undefined;






export default PatchedImportedPodcast;

