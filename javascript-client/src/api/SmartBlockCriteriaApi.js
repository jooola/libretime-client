/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchedSmartBlockCriteria from '../model/PatchedSmartBlockCriteria';
import SmartBlockCriteria from '../model/SmartBlockCriteria';

/**
* SmartBlockCriteria service.
* @module api/SmartBlockCriteriaApi
* @version 2.0.0
*/
export default class SmartBlockCriteriaApi {

    /**
    * Constructs a new SmartBlockCriteriaApi. 
    * @alias module:api/SmartBlockCriteriaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the smartBlockCriteriaCreate operation.
     * @callback module:api/SmartBlockCriteriaApi~smartBlockCriteriaCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SmartBlockCriteria} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SmartBlockCriteria} smartBlockCriteria 
     * @param {module:api/SmartBlockCriteriaApi~smartBlockCriteriaCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmartBlockCriteria}
     */
    smartBlockCriteriaCreate(smartBlockCriteria, callback) {
      let postBody = smartBlockCriteria;
      // verify the required parameter 'smartBlockCriteria' is set
      if (smartBlockCriteria === undefined || smartBlockCriteria === null) {
        throw new Error("Missing the required parameter 'smartBlockCriteria' when calling smartBlockCriteriaCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = SmartBlockCriteria;
      return this.apiClient.callApi(
        '/api/v2/smart-block-criteria/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smartBlockCriteriaDestroy operation.
     * @callback module:api/SmartBlockCriteriaApi~smartBlockCriteriaDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this smart block criteria.
     * @param {module:api/SmartBlockCriteriaApi~smartBlockCriteriaDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    smartBlockCriteriaDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling smartBlockCriteriaDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/smart-block-criteria/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smartBlockCriteriaList operation.
     * @callback module:api/SmartBlockCriteriaApi~smartBlockCriteriaListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SmartBlockCriteria>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SmartBlockCriteriaApi~smartBlockCriteriaListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SmartBlockCriteria>}
     */
    smartBlockCriteriaList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SmartBlockCriteria];
      return this.apiClient.callApi(
        '/api/v2/smart-block-criteria/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smartBlockCriteriaPartialUpdate operation.
     * @callback module:api/SmartBlockCriteriaApi~smartBlockCriteriaPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SmartBlockCriteria} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this smart block criteria.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedSmartBlockCriteria} opts.patchedSmartBlockCriteria 
     * @param {module:api/SmartBlockCriteriaApi~smartBlockCriteriaPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmartBlockCriteria}
     */
    smartBlockCriteriaPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedSmartBlockCriteria'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling smartBlockCriteriaPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = SmartBlockCriteria;
      return this.apiClient.callApi(
        '/api/v2/smart-block-criteria/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smartBlockCriteriaRetrieve operation.
     * @callback module:api/SmartBlockCriteriaApi~smartBlockCriteriaRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SmartBlockCriteria} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this smart block criteria.
     * @param {module:api/SmartBlockCriteriaApi~smartBlockCriteriaRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmartBlockCriteria}
     */
    smartBlockCriteriaRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling smartBlockCriteriaRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SmartBlockCriteria;
      return this.apiClient.callApi(
        '/api/v2/smart-block-criteria/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smartBlockCriteriaUpdate operation.
     * @callback module:api/SmartBlockCriteriaApi~smartBlockCriteriaUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SmartBlockCriteria} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this smart block criteria.
     * @param {module:model/SmartBlockCriteria} smartBlockCriteria 
     * @param {module:api/SmartBlockCriteriaApi~smartBlockCriteriaUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmartBlockCriteria}
     */
    smartBlockCriteriaUpdate(id, smartBlockCriteria, callback) {
      let postBody = smartBlockCriteria;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling smartBlockCriteriaUpdate");
      }
      // verify the required parameter 'smartBlockCriteria' is set
      if (smartBlockCriteria === undefined || smartBlockCriteria === null) {
        throw new Error("Missing the required parameter 'smartBlockCriteria' when calling smartBlockCriteriaUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = SmartBlockCriteria;
      return this.apiClient.callApi(
        '/api/v2/smart-block-criteria/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
