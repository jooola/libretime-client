/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchedUserToken from '../model/PatchedUserToken';
import UserToken from '../model/UserToken';

/**
* UserTokens service.
* @module api/UserTokensApi
* @version 2.0.0
*/
export default class UserTokensApi {

    /**
    * Constructs a new UserTokensApi. 
    * @alias module:api/UserTokensApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the userTokensCreate operation.
     * @callback module:api/UserTokensApi~userTokensCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UserToken} userToken 
     * @param {module:api/UserTokensApi~userTokensCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserToken}
     */
    userTokensCreate(userToken, callback) {
      let postBody = userToken;
      // verify the required parameter 'userToken' is set
      if (userToken === undefined || userToken === null) {
        throw new Error("Missing the required parameter 'userToken' when calling userTokensCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UserToken;
      return this.apiClient.callApi(
        '/api/v2/user-tokens/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userTokensDestroy operation.
     * @callback module:api/UserTokensApi~userTokensDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this user token.
     * @param {module:api/UserTokensApi~userTokensDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userTokensDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userTokensDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/user-tokens/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userTokensList operation.
     * @callback module:api/UserTokensApi~userTokensListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserToken>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/UserTokensApi~userTokensListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserToken>}
     */
    userTokensList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserToken];
      return this.apiClient.callApi(
        '/api/v2/user-tokens/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userTokensPartialUpdate operation.
     * @callback module:api/UserTokensApi~userTokensPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this user token.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedUserToken} opts.patchedUserToken 
     * @param {module:api/UserTokensApi~userTokensPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserToken}
     */
    userTokensPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedUserToken'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userTokensPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UserToken;
      return this.apiClient.callApi(
        '/api/v2/user-tokens/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userTokensRetrieve operation.
     * @callback module:api/UserTokensApi~userTokensRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this user token.
     * @param {module:api/UserTokensApi~userTokensRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserToken}
     */
    userTokensRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userTokensRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserToken;
      return this.apiClient.callApi(
        '/api/v2/user-tokens/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userTokensUpdate operation.
     * @callback module:api/UserTokensApi~userTokensUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this user token.
     * @param {module:model/UserToken} userToken 
     * @param {module:api/UserTokensApi~userTokensUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserToken}
     */
    userTokensUpdate(id, userToken, callback) {
      let postBody = userToken;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userTokensUpdate");
      }
      // verify the required parameter 'userToken' is set
      if (userToken === undefined || userToken === null) {
        throw new Error("Missing the required parameter 'userToken' when calling userTokensUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UserToken;
      return this.apiClient.callApi(
        '/api/v2/user-tokens/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
