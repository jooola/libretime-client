/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MountName from '../model/MountName';
import PatchedMountName from '../model/PatchedMountName';

/**
* MountNames service.
* @module api/MountNamesApi
* @version 2.0.0
*/
export default class MountNamesApi {

    /**
    * Constructs a new MountNamesApi. 
    * @alias module:api/MountNamesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mountNamesCreate operation.
     * @callback module:api/MountNamesApi~mountNamesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MountName} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/MountName} mountName 
     * @param {module:api/MountNamesApi~mountNamesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MountName}
     */
    mountNamesCreate(mountName, callback) {
      let postBody = mountName;
      // verify the required parameter 'mountName' is set
      if (mountName === undefined || mountName === null) {
        throw new Error("Missing the required parameter 'mountName' when calling mountNamesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = MountName;
      return this.apiClient.callApi(
        '/api/v2/mount-names/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mountNamesDestroy operation.
     * @callback module:api/MountNamesApi~mountNamesDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this mount name.
     * @param {module:api/MountNamesApi~mountNamesDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mountNamesDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mountNamesDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/mount-names/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mountNamesList operation.
     * @callback module:api/MountNamesApi~mountNamesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MountName>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/MountNamesApi~mountNamesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MountName>}
     */
    mountNamesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MountName];
      return this.apiClient.callApi(
        '/api/v2/mount-names/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mountNamesPartialUpdate operation.
     * @callback module:api/MountNamesApi~mountNamesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MountName} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this mount name.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedMountName} opts.patchedMountName 
     * @param {module:api/MountNamesApi~mountNamesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MountName}
     */
    mountNamesPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedMountName'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mountNamesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = MountName;
      return this.apiClient.callApi(
        '/api/v2/mount-names/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mountNamesRetrieve operation.
     * @callback module:api/MountNamesApi~mountNamesRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MountName} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this mount name.
     * @param {module:api/MountNamesApi~mountNamesRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MountName}
     */
    mountNamesRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mountNamesRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MountName;
      return this.apiClient.callApi(
        '/api/v2/mount-names/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mountNamesUpdate operation.
     * @callback module:api/MountNamesApi~mountNamesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MountName} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this mount name.
     * @param {module:model/MountName} mountName 
     * @param {module:api/MountNamesApi~mountNamesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MountName}
     */
    mountNamesUpdate(id, mountName, callback) {
      let postBody = mountName;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mountNamesUpdate");
      }
      // verify the required parameter 'mountName' is set
      if (mountName === undefined || mountName === null) {
        throw new Error("Missing the required parameter 'mountName' when calling mountNamesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = MountName;
      return this.apiClient.callApi(
        '/api/v2/mount-names/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
