/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchedTimestamp from '../model/PatchedTimestamp';
import Timestamp from '../model/Timestamp';

/**
* Timestamps service.
* @module api/TimestampsApi
* @version 2.0.0
*/
export default class TimestampsApi {

    /**
    * Constructs a new TimestampsApi. 
    * @alias module:api/TimestampsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the timestampsCreate operation.
     * @callback module:api/TimestampsApi~timestampsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Timestamp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Timestamp} timestamp 
     * @param {module:api/TimestampsApi~timestampsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Timestamp}
     */
    timestampsCreate(timestamp, callback) {
      let postBody = timestamp;
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling timestampsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Timestamp;
      return this.apiClient.callApi(
        '/api/v2/timestamps/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timestampsDestroy operation.
     * @callback module:api/TimestampsApi~timestampsDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this timestamp.
     * @param {module:api/TimestampsApi~timestampsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    timestampsDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling timestampsDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/timestamps/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timestampsList operation.
     * @callback module:api/TimestampsApi~timestampsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Timestamp>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/TimestampsApi~timestampsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Timestamp>}
     */
    timestampsList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Timestamp];
      return this.apiClient.callApi(
        '/api/v2/timestamps/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timestampsPartialUpdate operation.
     * @callback module:api/TimestampsApi~timestampsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Timestamp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this timestamp.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedTimestamp} opts.patchedTimestamp 
     * @param {module:api/TimestampsApi~timestampsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Timestamp}
     */
    timestampsPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedTimestamp'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling timestampsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Timestamp;
      return this.apiClient.callApi(
        '/api/v2/timestamps/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timestampsRetrieve operation.
     * @callback module:api/TimestampsApi~timestampsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Timestamp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this timestamp.
     * @param {module:api/TimestampsApi~timestampsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Timestamp}
     */
    timestampsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling timestampsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Timestamp;
      return this.apiClient.callApi(
        '/api/v2/timestamps/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the timestampsUpdate operation.
     * @callback module:api/TimestampsApi~timestampsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Timestamp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this timestamp.
     * @param {module:model/Timestamp} timestamp 
     * @param {module:api/TimestampsApi~timestampsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Timestamp}
     */
    timestampsUpdate(id, timestamp, callback) {
      let postBody = timestamp;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling timestampsUpdate");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling timestampsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Timestamp;
      return this.apiClient.callApi(
        '/api/v2/timestamps/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
