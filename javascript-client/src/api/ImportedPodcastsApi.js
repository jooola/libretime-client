/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ImportedPodcast from '../model/ImportedPodcast';
import PatchedImportedPodcast from '../model/PatchedImportedPodcast';

/**
* ImportedPodcasts service.
* @module api/ImportedPodcastsApi
* @version 2.0.0
*/
export default class ImportedPodcastsApi {

    /**
    * Constructs a new ImportedPodcastsApi. 
    * @alias module:api/ImportedPodcastsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the importedPodcastsCreate operation.
     * @callback module:api/ImportedPodcastsApi~importedPodcastsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportedPodcast} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ImportedPodcast} importedPodcast 
     * @param {module:api/ImportedPodcastsApi~importedPodcastsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportedPodcast}
     */
    importedPodcastsCreate(importedPodcast, callback) {
      let postBody = importedPodcast;
      // verify the required parameter 'importedPodcast' is set
      if (importedPodcast === undefined || importedPodcast === null) {
        throw new Error("Missing the required parameter 'importedPodcast' when calling importedPodcastsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ImportedPodcast;
      return this.apiClient.callApi(
        '/api/v2/imported-podcasts/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importedPodcastsDestroy operation.
     * @callback module:api/ImportedPodcastsApi~importedPodcastsDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this imported podcast.
     * @param {module:api/ImportedPodcastsApi~importedPodcastsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    importedPodcastsDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling importedPodcastsDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/imported-podcasts/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importedPodcastsList operation.
     * @callback module:api/ImportedPodcastsApi~importedPodcastsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ImportedPodcast>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ImportedPodcastsApi~importedPodcastsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ImportedPodcast>}
     */
    importedPodcastsList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ImportedPodcast];
      return this.apiClient.callApi(
        '/api/v2/imported-podcasts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importedPodcastsPartialUpdate operation.
     * @callback module:api/ImportedPodcastsApi~importedPodcastsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportedPodcast} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this imported podcast.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedImportedPodcast} opts.patchedImportedPodcast 
     * @param {module:api/ImportedPodcastsApi~importedPodcastsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportedPodcast}
     */
    importedPodcastsPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedImportedPodcast'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling importedPodcastsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ImportedPodcast;
      return this.apiClient.callApi(
        '/api/v2/imported-podcasts/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importedPodcastsRetrieve operation.
     * @callback module:api/ImportedPodcastsApi~importedPodcastsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportedPodcast} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this imported podcast.
     * @param {module:api/ImportedPodcastsApi~importedPodcastsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportedPodcast}
     */
    importedPodcastsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling importedPodcastsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImportedPodcast;
      return this.apiClient.callApi(
        '/api/v2/imported-podcasts/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importedPodcastsUpdate operation.
     * @callback module:api/ImportedPodcastsApi~importedPodcastsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportedPodcast} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this imported podcast.
     * @param {module:model/ImportedPodcast} importedPodcast 
     * @param {module:api/ImportedPodcastsApi~importedPodcastsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportedPodcast}
     */
    importedPodcastsUpdate(id, importedPodcast, callback) {
      let postBody = importedPodcast;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling importedPodcastsUpdate");
      }
      // verify the required parameter 'importedPodcast' is set
      if (importedPodcast === undefined || importedPodcast === null) {
        throw new Error("Missing the required parameter 'importedPodcast' when calling importedPodcastsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ImportedPodcast;
      return this.apiClient.callApi(
        '/api/v2/imported-podcasts/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
