/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchedPlayoutHistory from '../model/PatchedPlayoutHistory';
import PlayoutHistory from '../model/PlayoutHistory';

/**
* PlayoutHistory service.
* @module api/PlayoutHistoryApi
* @version 2.0.0
*/
export default class PlayoutHistoryApi {

    /**
    * Constructs a new PlayoutHistoryApi. 
    * @alias module:api/PlayoutHistoryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the playoutHistoryCreate operation.
     * @callback module:api/PlayoutHistoryApi~playoutHistoryCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayoutHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PlayoutHistory} playoutHistory 
     * @param {module:api/PlayoutHistoryApi~playoutHistoryCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayoutHistory}
     */
    playoutHistoryCreate(playoutHistory, callback) {
      let postBody = playoutHistory;
      // verify the required parameter 'playoutHistory' is set
      if (playoutHistory === undefined || playoutHistory === null) {
        throw new Error("Missing the required parameter 'playoutHistory' when calling playoutHistoryCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PlayoutHistory;
      return this.apiClient.callApi(
        '/api/v2/playout-history/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playoutHistoryDestroy operation.
     * @callback module:api/PlayoutHistoryApi~playoutHistoryDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this playout history.
     * @param {module:api/PlayoutHistoryApi~playoutHistoryDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playoutHistoryDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling playoutHistoryDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/playout-history/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playoutHistoryList operation.
     * @callback module:api/PlayoutHistoryApi~playoutHistoryListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayoutHistory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/PlayoutHistoryApi~playoutHistoryListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayoutHistory>}
     */
    playoutHistoryList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayoutHistory];
      return this.apiClient.callApi(
        '/api/v2/playout-history/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playoutHistoryPartialUpdate operation.
     * @callback module:api/PlayoutHistoryApi~playoutHistoryPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayoutHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this playout history.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedPlayoutHistory} opts.patchedPlayoutHistory 
     * @param {module:api/PlayoutHistoryApi~playoutHistoryPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayoutHistory}
     */
    playoutHistoryPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedPlayoutHistory'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling playoutHistoryPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PlayoutHistory;
      return this.apiClient.callApi(
        '/api/v2/playout-history/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playoutHistoryRetrieve operation.
     * @callback module:api/PlayoutHistoryApi~playoutHistoryRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayoutHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this playout history.
     * @param {module:api/PlayoutHistoryApi~playoutHistoryRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayoutHistory}
     */
    playoutHistoryRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling playoutHistoryRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlayoutHistory;
      return this.apiClient.callApi(
        '/api/v2/playout-history/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playoutHistoryUpdate operation.
     * @callback module:api/PlayoutHistoryApi~playoutHistoryUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayoutHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this playout history.
     * @param {module:model/PlayoutHistory} playoutHistory 
     * @param {module:api/PlayoutHistoryApi~playoutHistoryUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayoutHistory}
     */
    playoutHistoryUpdate(id, playoutHistory, callback) {
      let postBody = playoutHistory;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling playoutHistoryUpdate");
      }
      // verify the required parameter 'playoutHistory' is set
      if (playoutHistory === undefined || playoutHistory === null) {
        throw new Error("Missing the required parameter 'playoutHistory' when calling playoutHistoryUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PlayoutHistory;
      return this.apiClient.callApi(
        '/api/v2/playout-history/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
