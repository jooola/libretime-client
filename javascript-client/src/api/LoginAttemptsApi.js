/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LoginAttempt from '../model/LoginAttempt';
import PatchedLoginAttempt from '../model/PatchedLoginAttempt';

/**
* LoginAttempts service.
* @module api/LoginAttemptsApi
* @version 2.0.0
*/
export default class LoginAttemptsApi {

    /**
    * Constructs a new LoginAttemptsApi. 
    * @alias module:api/LoginAttemptsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the loginAttemptsCreate operation.
     * @callback module:api/LoginAttemptsApi~loginAttemptsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginAttempt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginAttempt} opts.loginAttempt 
     * @param {module:api/LoginAttemptsApi~loginAttemptsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginAttempt}
     */
    loginAttemptsCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['loginAttempt'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = LoginAttempt;
      return this.apiClient.callApi(
        '/api/v2/login-attempts/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginAttemptsDestroy operation.
     * @callback module:api/LoginAttemptsApi~loginAttemptsDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} ip A unique value identifying this login attempt.
     * @param {module:api/LoginAttemptsApi~loginAttemptsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loginAttemptsDestroy(ip, callback) {
      let postBody = null;
      // verify the required parameter 'ip' is set
      if (ip === undefined || ip === null) {
        throw new Error("Missing the required parameter 'ip' when calling loginAttemptsDestroy");
      }

      let pathParams = {
        'ip': ip
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/login-attempts/{ip}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginAttemptsList operation.
     * @callback module:api/LoginAttemptsApi~loginAttemptsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LoginAttempt>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/LoginAttemptsApi~loginAttemptsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LoginAttempt>}
     */
    loginAttemptsList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LoginAttempt];
      return this.apiClient.callApi(
        '/api/v2/login-attempts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginAttemptsPartialUpdate operation.
     * @callback module:api/LoginAttemptsApi~loginAttemptsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginAttempt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} ip A unique value identifying this login attempt.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedLoginAttempt} opts.patchedLoginAttempt 
     * @param {module:api/LoginAttemptsApi~loginAttemptsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginAttempt}
     */
    loginAttemptsPartialUpdate(ip, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedLoginAttempt'];
      // verify the required parameter 'ip' is set
      if (ip === undefined || ip === null) {
        throw new Error("Missing the required parameter 'ip' when calling loginAttemptsPartialUpdate");
      }

      let pathParams = {
        'ip': ip
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = LoginAttempt;
      return this.apiClient.callApi(
        '/api/v2/login-attempts/{ip}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginAttemptsRetrieve operation.
     * @callback module:api/LoginAttemptsApi~loginAttemptsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginAttempt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} ip A unique value identifying this login attempt.
     * @param {module:api/LoginAttemptsApi~loginAttemptsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginAttempt}
     */
    loginAttemptsRetrieve(ip, callback) {
      let postBody = null;
      // verify the required parameter 'ip' is set
      if (ip === undefined || ip === null) {
        throw new Error("Missing the required parameter 'ip' when calling loginAttemptsRetrieve");
      }

      let pathParams = {
        'ip': ip
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoginAttempt;
      return this.apiClient.callApi(
        '/api/v2/login-attempts/{ip}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginAttemptsUpdate operation.
     * @callback module:api/LoginAttemptsApi~loginAttemptsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginAttempt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} ip A unique value identifying this login attempt.
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginAttempt} opts.loginAttempt 
     * @param {module:api/LoginAttemptsApi~loginAttemptsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginAttempt}
     */
    loginAttemptsUpdate(ip, opts, callback) {
      opts = opts || {};
      let postBody = opts['loginAttempt'];
      // verify the required parameter 'ip' is set
      if (ip === undefined || ip === null) {
        throw new Error("Missing the required parameter 'ip' when calling loginAttemptsUpdate");
      }

      let pathParams = {
        'ip': ip
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = LoginAttempt;
      return this.apiClient.callApi(
        '/api/v2/login-attempts/{ip}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
