/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListenerCount from '../model/ListenerCount';
import PatchedListenerCount from '../model/PatchedListenerCount';

/**
* ListenerCounts service.
* @module api/ListenerCountsApi
* @version 2.0.0
*/
export default class ListenerCountsApi {

    /**
    * Constructs a new ListenerCountsApi. 
    * @alias module:api/ListenerCountsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listenerCountsCreate operation.
     * @callback module:api/ListenerCountsApi~listenerCountsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListenerCount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ListenerCount} listenerCount 
     * @param {module:api/ListenerCountsApi~listenerCountsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListenerCount}
     */
    listenerCountsCreate(listenerCount, callback) {
      let postBody = listenerCount;
      // verify the required parameter 'listenerCount' is set
      if (listenerCount === undefined || listenerCount === null) {
        throw new Error("Missing the required parameter 'listenerCount' when calling listenerCountsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ListenerCount;
      return this.apiClient.callApi(
        '/api/v2/listener-counts/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listenerCountsDestroy operation.
     * @callback module:api/ListenerCountsApi~listenerCountsDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this listener count.
     * @param {module:api/ListenerCountsApi~listenerCountsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listenerCountsDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listenerCountsDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/listener-counts/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listenerCountsList operation.
     * @callback module:api/ListenerCountsApi~listenerCountsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListenerCount>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ListenerCountsApi~listenerCountsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListenerCount>}
     */
    listenerCountsList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListenerCount];
      return this.apiClient.callApi(
        '/api/v2/listener-counts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listenerCountsPartialUpdate operation.
     * @callback module:api/ListenerCountsApi~listenerCountsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListenerCount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this listener count.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedListenerCount} opts.patchedListenerCount 
     * @param {module:api/ListenerCountsApi~listenerCountsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListenerCount}
     */
    listenerCountsPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedListenerCount'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listenerCountsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ListenerCount;
      return this.apiClient.callApi(
        '/api/v2/listener-counts/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listenerCountsRetrieve operation.
     * @callback module:api/ListenerCountsApi~listenerCountsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListenerCount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this listener count.
     * @param {module:api/ListenerCountsApi~listenerCountsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListenerCount}
     */
    listenerCountsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listenerCountsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListenerCount;
      return this.apiClient.callApi(
        '/api/v2/listener-counts/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listenerCountsUpdate operation.
     * @callback module:api/ListenerCountsApi~listenerCountsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListenerCount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this listener count.
     * @param {module:model/ListenerCount} listenerCount 
     * @param {module:api/ListenerCountsApi~listenerCountsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListenerCount}
     */
    listenerCountsUpdate(id, listenerCount, callback) {
      let postBody = listenerCount;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listenerCountsUpdate");
      }
      // verify the required parameter 'listenerCount' is set
      if (listenerCount === undefined || listenerCount === null) {
        throw new Error("Missing the required parameter 'listenerCount' when calling listenerCountsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ListenerCount;
      return this.apiClient.callApi(
        '/api/v2/listener-counts/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
