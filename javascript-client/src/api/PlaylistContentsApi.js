/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchedPlaylistContent from '../model/PatchedPlaylistContent';
import PlaylistContent from '../model/PlaylistContent';

/**
* PlaylistContents service.
* @module api/PlaylistContentsApi
* @version 2.0.0
*/
export default class PlaylistContentsApi {

    /**
    * Constructs a new PlaylistContentsApi. 
    * @alias module:api/PlaylistContentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the playlistContentsCreate operation.
     * @callback module:api/PlaylistContentsApi~playlistContentsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaylistContent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PlaylistContent} playlistContent 
     * @param {module:api/PlaylistContentsApi~playlistContentsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaylistContent}
     */
    playlistContentsCreate(playlistContent, callback) {
      let postBody = playlistContent;
      // verify the required parameter 'playlistContent' is set
      if (playlistContent === undefined || playlistContent === null) {
        throw new Error("Missing the required parameter 'playlistContent' when calling playlistContentsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PlaylistContent;
      return this.apiClient.callApi(
        '/api/v2/playlist-contents/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playlistContentsDestroy operation.
     * @callback module:api/PlaylistContentsApi~playlistContentsDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this playlist content.
     * @param {module:api/PlaylistContentsApi~playlistContentsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playlistContentsDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling playlistContentsDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/playlist-contents/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playlistContentsList operation.
     * @callback module:api/PlaylistContentsApi~playlistContentsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlaylistContent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/PlaylistContentsApi~playlistContentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlaylistContent>}
     */
    playlistContentsList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlaylistContent];
      return this.apiClient.callApi(
        '/api/v2/playlist-contents/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playlistContentsPartialUpdate operation.
     * @callback module:api/PlaylistContentsApi~playlistContentsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaylistContent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this playlist content.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedPlaylistContent} opts.patchedPlaylistContent 
     * @param {module:api/PlaylistContentsApi~playlistContentsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaylistContent}
     */
    playlistContentsPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedPlaylistContent'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling playlistContentsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PlaylistContent;
      return this.apiClient.callApi(
        '/api/v2/playlist-contents/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playlistContentsRetrieve operation.
     * @callback module:api/PlaylistContentsApi~playlistContentsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaylistContent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this playlist content.
     * @param {module:api/PlaylistContentsApi~playlistContentsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaylistContent}
     */
    playlistContentsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling playlistContentsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlaylistContent;
      return this.apiClient.callApi(
        '/api/v2/playlist-contents/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playlistContentsUpdate operation.
     * @callback module:api/PlaylistContentsApi~playlistContentsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaylistContent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this playlist content.
     * @param {module:model/PlaylistContent} playlistContent 
     * @param {module:api/PlaylistContentsApi~playlistContentsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaylistContent}
     */
    playlistContentsUpdate(id, playlistContent, callback) {
      let postBody = playlistContent;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling playlistContentsUpdate");
      }
      // verify the required parameter 'playlistContent' is set
      if (playlistContent === undefined || playlistContent === null) {
        throw new Error("Missing the required parameter 'playlistContent' when calling playlistContentsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PlaylistContent;
      return this.apiClient.callApi(
        '/api/v2/playlist-contents/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
