/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CeleryTask from '../model/CeleryTask';
import PatchedCeleryTask from '../model/PatchedCeleryTask';

/**
* CeleryTasks service.
* @module api/CeleryTasksApi
* @version 2.0.0
*/
export default class CeleryTasksApi {

    /**
    * Constructs a new CeleryTasksApi. 
    * @alias module:api/CeleryTasksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the celeryTasksCreate operation.
     * @callback module:api/CeleryTasksApi~celeryTasksCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CeleryTask} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CeleryTask} celeryTask 
     * @param {module:api/CeleryTasksApi~celeryTasksCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CeleryTask}
     */
    celeryTasksCreate(celeryTask, callback) {
      let postBody = celeryTask;
      // verify the required parameter 'celeryTask' is set
      if (celeryTask === undefined || celeryTask === null) {
        throw new Error("Missing the required parameter 'celeryTask' when calling celeryTasksCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CeleryTask;
      return this.apiClient.callApi(
        '/api/v2/celery-tasks/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the celeryTasksDestroy operation.
     * @callback module:api/CeleryTasksApi~celeryTasksDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this celery task.
     * @param {module:api/CeleryTasksApi~celeryTasksDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    celeryTasksDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling celeryTasksDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/celery-tasks/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the celeryTasksList operation.
     * @callback module:api/CeleryTasksApi~celeryTasksListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CeleryTask>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/CeleryTasksApi~celeryTasksListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CeleryTask>}
     */
    celeryTasksList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CeleryTask];
      return this.apiClient.callApi(
        '/api/v2/celery-tasks/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the celeryTasksPartialUpdate operation.
     * @callback module:api/CeleryTasksApi~celeryTasksPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CeleryTask} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this celery task.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedCeleryTask} opts.patchedCeleryTask 
     * @param {module:api/CeleryTasksApi~celeryTasksPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CeleryTask}
     */
    celeryTasksPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedCeleryTask'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling celeryTasksPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CeleryTask;
      return this.apiClient.callApi(
        '/api/v2/celery-tasks/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the celeryTasksRetrieve operation.
     * @callback module:api/CeleryTasksApi~celeryTasksRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CeleryTask} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this celery task.
     * @param {module:api/CeleryTasksApi~celeryTasksRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CeleryTask}
     */
    celeryTasksRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling celeryTasksRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CeleryTask;
      return this.apiClient.callApi(
        '/api/v2/celery-tasks/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the celeryTasksUpdate operation.
     * @callback module:api/CeleryTasksApi~celeryTasksUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CeleryTask} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this celery task.
     * @param {module:model/CeleryTask} celeryTask 
     * @param {module:api/CeleryTasksApi~celeryTasksUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CeleryTask}
     */
    celeryTasksUpdate(id, celeryTask, callback) {
      let postBody = celeryTask;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling celeryTasksUpdate");
      }
      // verify the required parameter 'celeryTask' is set
      if (celeryTask === undefined || celeryTask === null) {
        throw new Error("Missing the required parameter 'celeryTask' when calling celeryTasksUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CeleryTask;
      return this.apiClient.callApi(
        '/api/v2/celery-tasks/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
