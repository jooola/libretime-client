/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchedShowHost from '../model/PatchedShowHost';
import ShowHost from '../model/ShowHost';

/**
* ShowHosts service.
* @module api/ShowHostsApi
* @version 2.0.0
*/
export default class ShowHostsApi {

    /**
    * Constructs a new ShowHostsApi. 
    * @alias module:api/ShowHostsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the showHostsCreate operation.
     * @callback module:api/ShowHostsApi~showHostsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowHost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ShowHost} showHost 
     * @param {module:api/ShowHostsApi~showHostsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowHost}
     */
    showHostsCreate(showHost, callback) {
      let postBody = showHost;
      // verify the required parameter 'showHost' is set
      if (showHost === undefined || showHost === null) {
        throw new Error("Missing the required parameter 'showHost' when calling showHostsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ShowHost;
      return this.apiClient.callApi(
        '/api/v2/show-hosts/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showHostsDestroy operation.
     * @callback module:api/ShowHostsApi~showHostsDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this show host.
     * @param {module:api/ShowHostsApi~showHostsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    showHostsDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showHostsDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/show-hosts/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showHostsList operation.
     * @callback module:api/ShowHostsApi~showHostsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ShowHost>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ShowHostsApi~showHostsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ShowHost>}
     */
    showHostsList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ShowHost];
      return this.apiClient.callApi(
        '/api/v2/show-hosts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showHostsPartialUpdate operation.
     * @callback module:api/ShowHostsApi~showHostsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowHost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this show host.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedShowHost} opts.patchedShowHost 
     * @param {module:api/ShowHostsApi~showHostsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowHost}
     */
    showHostsPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedShowHost'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showHostsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ShowHost;
      return this.apiClient.callApi(
        '/api/v2/show-hosts/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showHostsRetrieve operation.
     * @callback module:api/ShowHostsApi~showHostsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowHost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this show host.
     * @param {module:api/ShowHostsApi~showHostsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowHost}
     */
    showHostsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showHostsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShowHost;
      return this.apiClient.callApi(
        '/api/v2/show-hosts/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showHostsUpdate operation.
     * @callback module:api/ShowHostsApi~showHostsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowHost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this show host.
     * @param {module:model/ShowHost} showHost 
     * @param {module:api/ShowHostsApi~showHostsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowHost}
     */
    showHostsUpdate(id, showHost, callback) {
      let postBody = showHost;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showHostsUpdate");
      }
      // verify the required parameter 'showHost' is set
      if (showHost === undefined || showHost === null) {
        throw new Error("Missing the required parameter 'showHost' when calling showHostsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ShowHost;
      return this.apiClient.callApi(
        '/api/v2/show-hosts/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
