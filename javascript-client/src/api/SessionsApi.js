/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchedSession from '../model/PatchedSession';
import Session from '../model/Session';

/**
* Sessions service.
* @module api/SessionsApi
* @version 2.0.0
*/
export default class SessionsApi {

    /**
    * Constructs a new SessionsApi. 
    * @alias module:api/SessionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the sessionsCreate operation.
     * @callback module:api/SessionsApi~sessionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/Session} opts.session 
     * @param {module:api/SessionsApi~sessionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    sessionsCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['session'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Session;
      return this.apiClient.callApi(
        '/api/v2/sessions/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionsDestroy operation.
     * @callback module:api/SessionsApi~sessionsDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} sessid A unique value identifying this session.
     * @param {module:api/SessionsApi~sessionsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionsDestroy(sessid, callback) {
      let postBody = null;
      // verify the required parameter 'sessid' is set
      if (sessid === undefined || sessid === null) {
        throw new Error("Missing the required parameter 'sessid' when calling sessionsDestroy");
      }

      let pathParams = {
        'sessid': sessid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/sessions/{sessid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionsList operation.
     * @callback module:api/SessionsApi~sessionsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Session>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SessionsApi~sessionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Session>}
     */
    sessionsList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Session];
      return this.apiClient.callApi(
        '/api/v2/sessions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionsPartialUpdate operation.
     * @callback module:api/SessionsApi~sessionsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} sessid A unique value identifying this session.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedSession} opts.patchedSession 
     * @param {module:api/SessionsApi~sessionsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    sessionsPartialUpdate(sessid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedSession'];
      // verify the required parameter 'sessid' is set
      if (sessid === undefined || sessid === null) {
        throw new Error("Missing the required parameter 'sessid' when calling sessionsPartialUpdate");
      }

      let pathParams = {
        'sessid': sessid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Session;
      return this.apiClient.callApi(
        '/api/v2/sessions/{sessid}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionsRetrieve operation.
     * @callback module:api/SessionsApi~sessionsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} sessid A unique value identifying this session.
     * @param {module:api/SessionsApi~sessionsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    sessionsRetrieve(sessid, callback) {
      let postBody = null;
      // verify the required parameter 'sessid' is set
      if (sessid === undefined || sessid === null) {
        throw new Error("Missing the required parameter 'sessid' when calling sessionsRetrieve");
      }

      let pathParams = {
        'sessid': sessid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Session;
      return this.apiClient.callApi(
        '/api/v2/sessions/{sessid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionsUpdate operation.
     * @callback module:api/SessionsApi~sessionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} sessid A unique value identifying this session.
     * @param {Object} opts Optional parameters
     * @param {module:model/Session} opts.session 
     * @param {module:api/SessionsApi~sessionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    sessionsUpdate(sessid, opts, callback) {
      opts = opts || {};
      let postBody = opts['session'];
      // verify the required parameter 'sessid' is set
      if (sessid === undefined || sessid === null) {
        throw new Error("Missing the required parameter 'sessid' when calling sessionsUpdate");
      }

      let pathParams = {
        'sessid': sessid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Session;
      return this.apiClient.callApi(
        '/api/v2/sessions/{sessid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
