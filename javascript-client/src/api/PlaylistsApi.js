/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchedPlaylist from '../model/PatchedPlaylist';
import Playlist from '../model/Playlist';

/**
* Playlists service.
* @module api/PlaylistsApi
* @version 2.0.0
*/
export default class PlaylistsApi {

    /**
    * Constructs a new PlaylistsApi. 
    * @alias module:api/PlaylistsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the playlistsCreate operation.
     * @callback module:api/PlaylistsApi~playlistsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Playlist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Playlist} playlist 
     * @param {module:api/PlaylistsApi~playlistsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Playlist}
     */
    playlistsCreate(playlist, callback) {
      let postBody = playlist;
      // verify the required parameter 'playlist' is set
      if (playlist === undefined || playlist === null) {
        throw new Error("Missing the required parameter 'playlist' when calling playlistsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Playlist;
      return this.apiClient.callApi(
        '/api/v2/playlists/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playlistsDestroy operation.
     * @callback module:api/PlaylistsApi~playlistsDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this playlist.
     * @param {module:api/PlaylistsApi~playlistsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playlistsDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling playlistsDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/playlists/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playlistsList operation.
     * @callback module:api/PlaylistsApi~playlistsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Playlist>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/PlaylistsApi~playlistsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Playlist>}
     */
    playlistsList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Playlist];
      return this.apiClient.callApi(
        '/api/v2/playlists/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playlistsPartialUpdate operation.
     * @callback module:api/PlaylistsApi~playlistsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Playlist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this playlist.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedPlaylist} opts.patchedPlaylist 
     * @param {module:api/PlaylistsApi~playlistsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Playlist}
     */
    playlistsPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedPlaylist'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling playlistsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Playlist;
      return this.apiClient.callApi(
        '/api/v2/playlists/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playlistsRetrieve operation.
     * @callback module:api/PlaylistsApi~playlistsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Playlist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this playlist.
     * @param {module:api/PlaylistsApi~playlistsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Playlist}
     */
    playlistsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling playlistsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Playlist;
      return this.apiClient.callApi(
        '/api/v2/playlists/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playlistsUpdate operation.
     * @callback module:api/PlaylistsApi~playlistsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Playlist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this playlist.
     * @param {module:model/Playlist} playlist 
     * @param {module:api/PlaylistsApi~playlistsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Playlist}
     */
    playlistsUpdate(id, playlist, callback) {
      let postBody = playlist;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling playlistsUpdate");
      }
      // verify the required parameter 'playlist' is set
      if (playlist === undefined || playlist === null) {
        throw new Error("Missing the required parameter 'playlist' when calling playlistsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Playlist;
      return this.apiClient.callApi(
        '/api/v2/playlists/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
