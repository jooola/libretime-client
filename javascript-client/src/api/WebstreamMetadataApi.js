/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchedWebstreamMetadata from '../model/PatchedWebstreamMetadata';
import WebstreamMetadata from '../model/WebstreamMetadata';

/**
* WebstreamMetadata service.
* @module api/WebstreamMetadataApi
* @version 2.0.0
*/
export default class WebstreamMetadataApi {

    /**
    * Constructs a new WebstreamMetadataApi. 
    * @alias module:api/WebstreamMetadataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the webstreamMetadataCreate operation.
     * @callback module:api/WebstreamMetadataApi~webstreamMetadataCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebstreamMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/WebstreamMetadata} webstreamMetadata 
     * @param {module:api/WebstreamMetadataApi~webstreamMetadataCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebstreamMetadata}
     */
    webstreamMetadataCreate(webstreamMetadata, callback) {
      let postBody = webstreamMetadata;
      // verify the required parameter 'webstreamMetadata' is set
      if (webstreamMetadata === undefined || webstreamMetadata === null) {
        throw new Error("Missing the required parameter 'webstreamMetadata' when calling webstreamMetadataCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = WebstreamMetadata;
      return this.apiClient.callApi(
        '/api/v2/webstream-metadata/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webstreamMetadataDestroy operation.
     * @callback module:api/WebstreamMetadataApi~webstreamMetadataDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this webstream metadata.
     * @param {module:api/WebstreamMetadataApi~webstreamMetadataDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webstreamMetadataDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webstreamMetadataDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/webstream-metadata/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webstreamMetadataList operation.
     * @callback module:api/WebstreamMetadataApi~webstreamMetadataListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WebstreamMetadata>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/WebstreamMetadataApi~webstreamMetadataListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WebstreamMetadata>}
     */
    webstreamMetadataList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WebstreamMetadata];
      return this.apiClient.callApi(
        '/api/v2/webstream-metadata/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webstreamMetadataPartialUpdate operation.
     * @callback module:api/WebstreamMetadataApi~webstreamMetadataPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebstreamMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this webstream metadata.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedWebstreamMetadata} opts.patchedWebstreamMetadata 
     * @param {module:api/WebstreamMetadataApi~webstreamMetadataPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebstreamMetadata}
     */
    webstreamMetadataPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedWebstreamMetadata'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webstreamMetadataPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = WebstreamMetadata;
      return this.apiClient.callApi(
        '/api/v2/webstream-metadata/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webstreamMetadataRetrieve operation.
     * @callback module:api/WebstreamMetadataApi~webstreamMetadataRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebstreamMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this webstream metadata.
     * @param {module:api/WebstreamMetadataApi~webstreamMetadataRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebstreamMetadata}
     */
    webstreamMetadataRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webstreamMetadataRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebstreamMetadata;
      return this.apiClient.callApi(
        '/api/v2/webstream-metadata/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webstreamMetadataUpdate operation.
     * @callback module:api/WebstreamMetadataApi~webstreamMetadataUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebstreamMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this webstream metadata.
     * @param {module:model/WebstreamMetadata} webstreamMetadata 
     * @param {module:api/WebstreamMetadataApi~webstreamMetadataUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebstreamMetadata}
     */
    webstreamMetadataUpdate(id, webstreamMetadata, callback) {
      let postBody = webstreamMetadata;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webstreamMetadataUpdate");
      }
      // verify the required parameter 'webstreamMetadata' is set
      if (webstreamMetadata === undefined || webstreamMetadata === null) {
        throw new Error("Missing the required parameter 'webstreamMetadata' when calling webstreamMetadataUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = WebstreamMetadata;
      return this.apiClient.callApi(
        '/api/v2/webstream-metadata/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
