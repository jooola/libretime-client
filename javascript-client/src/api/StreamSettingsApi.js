/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchedStreamSetting from '../model/PatchedStreamSetting';
import StreamSetting from '../model/StreamSetting';

/**
* StreamSettings service.
* @module api/StreamSettingsApi
* @version 2.0.0
*/
export default class StreamSettingsApi {

    /**
    * Constructs a new StreamSettingsApi. 
    * @alias module:api/StreamSettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the streamSettingsCreate operation.
     * @callback module:api/StreamSettingsApi~streamSettingsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/StreamSetting} streamSetting 
     * @param {module:api/StreamSettingsApi~streamSettingsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamSetting}
     */
    streamSettingsCreate(streamSetting, callback) {
      let postBody = streamSetting;
      // verify the required parameter 'streamSetting' is set
      if (streamSetting === undefined || streamSetting === null) {
        throw new Error("Missing the required parameter 'streamSetting' when calling streamSettingsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = StreamSetting;
      return this.apiClient.callApi(
        '/api/v2/stream-settings/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamSettingsDestroy operation.
     * @callback module:api/StreamSettingsApi~streamSettingsDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} keyname A unique value identifying this stream setting.
     * @param {module:api/StreamSettingsApi~streamSettingsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    streamSettingsDestroy(keyname, callback) {
      let postBody = null;
      // verify the required parameter 'keyname' is set
      if (keyname === undefined || keyname === null) {
        throw new Error("Missing the required parameter 'keyname' when calling streamSettingsDestroy");
      }

      let pathParams = {
        'keyname': keyname
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/stream-settings/{keyname}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamSettingsList operation.
     * @callback module:api/StreamSettingsApi~streamSettingsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StreamSetting>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/StreamSettingsApi~streamSettingsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StreamSetting>}
     */
    streamSettingsList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [StreamSetting];
      return this.apiClient.callApi(
        '/api/v2/stream-settings/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamSettingsPartialUpdate operation.
     * @callback module:api/StreamSettingsApi~streamSettingsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} keyname A unique value identifying this stream setting.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedStreamSetting} opts.patchedStreamSetting 
     * @param {module:api/StreamSettingsApi~streamSettingsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamSetting}
     */
    streamSettingsPartialUpdate(keyname, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedStreamSetting'];
      // verify the required parameter 'keyname' is set
      if (keyname === undefined || keyname === null) {
        throw new Error("Missing the required parameter 'keyname' when calling streamSettingsPartialUpdate");
      }

      let pathParams = {
        'keyname': keyname
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = StreamSetting;
      return this.apiClient.callApi(
        '/api/v2/stream-settings/{keyname}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamSettingsRetrieve operation.
     * @callback module:api/StreamSettingsApi~streamSettingsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} keyname A unique value identifying this stream setting.
     * @param {module:api/StreamSettingsApi~streamSettingsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamSetting}
     */
    streamSettingsRetrieve(keyname, callback) {
      let postBody = null;
      // verify the required parameter 'keyname' is set
      if (keyname === undefined || keyname === null) {
        throw new Error("Missing the required parameter 'keyname' when calling streamSettingsRetrieve");
      }

      let pathParams = {
        'keyname': keyname
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StreamSetting;
      return this.apiClient.callApi(
        '/api/v2/stream-settings/{keyname}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamSettingsUpdate operation.
     * @callback module:api/StreamSettingsApi~streamSettingsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} keyname A unique value identifying this stream setting.
     * @param {module:model/StreamSetting} streamSetting 
     * @param {module:api/StreamSettingsApi~streamSettingsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamSetting}
     */
    streamSettingsUpdate(keyname, streamSetting, callback) {
      let postBody = streamSetting;
      // verify the required parameter 'keyname' is set
      if (keyname === undefined || keyname === null) {
        throw new Error("Missing the required parameter 'keyname' when calling streamSettingsUpdate");
      }
      // verify the required parameter 'streamSetting' is set
      if (streamSetting === undefined || streamSetting === null) {
        throw new Error("Missing the required parameter 'streamSetting' when calling streamSettingsUpdate");
      }

      let pathParams = {
        'keyname': keyname
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = StreamSetting;
      return this.apiClient.callApi(
        '/api/v2/stream-settings/{keyname}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
