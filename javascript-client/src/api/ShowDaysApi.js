/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchedShowDays from '../model/PatchedShowDays';
import ShowDays from '../model/ShowDays';

/**
* ShowDays service.
* @module api/ShowDaysApi
* @version 2.0.0
*/
export default class ShowDaysApi {

    /**
    * Constructs a new ShowDaysApi. 
    * @alias module:api/ShowDaysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the showDaysCreate operation.
     * @callback module:api/ShowDaysApi~showDaysCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowDays} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ShowDays} showDays 
     * @param {module:api/ShowDaysApi~showDaysCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowDays}
     */
    showDaysCreate(showDays, callback) {
      let postBody = showDays;
      // verify the required parameter 'showDays' is set
      if (showDays === undefined || showDays === null) {
        throw new Error("Missing the required parameter 'showDays' when calling showDaysCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ShowDays;
      return this.apiClient.callApi(
        '/api/v2/show-days/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showDaysDestroy operation.
     * @callback module:api/ShowDaysApi~showDaysDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this show days.
     * @param {module:api/ShowDaysApi~showDaysDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    showDaysDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showDaysDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/show-days/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showDaysList operation.
     * @callback module:api/ShowDaysApi~showDaysListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ShowDays>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ShowDaysApi~showDaysListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ShowDays>}
     */
    showDaysList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ShowDays];
      return this.apiClient.callApi(
        '/api/v2/show-days/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showDaysPartialUpdate operation.
     * @callback module:api/ShowDaysApi~showDaysPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowDays} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this show days.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedShowDays} opts.patchedShowDays 
     * @param {module:api/ShowDaysApi~showDaysPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowDays}
     */
    showDaysPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedShowDays'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showDaysPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ShowDays;
      return this.apiClient.callApi(
        '/api/v2/show-days/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showDaysRetrieve operation.
     * @callback module:api/ShowDaysApi~showDaysRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowDays} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this show days.
     * @param {module:api/ShowDaysApi~showDaysRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowDays}
     */
    showDaysRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showDaysRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShowDays;
      return this.apiClient.callApi(
        '/api/v2/show-days/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showDaysUpdate operation.
     * @callback module:api/ShowDaysApi~showDaysUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowDays} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this show days.
     * @param {module:model/ShowDays} showDays 
     * @param {module:api/ShowDaysApi~showDaysUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowDays}
     */
    showDaysUpdate(id, showDays, callback) {
      let postBody = showDays;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showDaysUpdate");
      }
      // verify the required parameter 'showDays' is set
      if (showDays === undefined || showDays === null) {
        throw new Error("Missing the required parameter 'showDays' when calling showDaysUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ShowDays;
      return this.apiClient.callApi(
        '/api/v2/show-days/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
