/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudFile from '../model/CloudFile';
import PatchedCloudFile from '../model/PatchedCloudFile';

/**
* CloudFiles service.
* @module api/CloudFilesApi
* @version 2.0.0
*/
export default class CloudFilesApi {

    /**
    * Constructs a new CloudFilesApi. 
    * @alias module:api/CloudFilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cloudFilesCreate operation.
     * @callback module:api/CloudFilesApi~cloudFilesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CloudFile} cloudFile 
     * @param {module:api/CloudFilesApi~cloudFilesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudFile}
     */
    cloudFilesCreate(cloudFile, callback) {
      let postBody = cloudFile;
      // verify the required parameter 'cloudFile' is set
      if (cloudFile === undefined || cloudFile === null) {
        throw new Error("Missing the required parameter 'cloudFile' when calling cloudFilesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CloudFile;
      return this.apiClient.callApi(
        '/api/v2/cloud-files/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudFilesDestroy operation.
     * @callback module:api/CloudFilesApi~cloudFilesDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this cloud file.
     * @param {module:api/CloudFilesApi~cloudFilesDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudFilesDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudFilesDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/cloud-files/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudFilesList operation.
     * @callback module:api/CloudFilesApi~cloudFilesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CloudFile>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/CloudFilesApi~cloudFilesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CloudFile>}
     */
    cloudFilesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CloudFile];
      return this.apiClient.callApi(
        '/api/v2/cloud-files/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudFilesPartialUpdate operation.
     * @callback module:api/CloudFilesApi~cloudFilesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this cloud file.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedCloudFile} opts.patchedCloudFile 
     * @param {module:api/CloudFilesApi~cloudFilesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudFile}
     */
    cloudFilesPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedCloudFile'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudFilesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CloudFile;
      return this.apiClient.callApi(
        '/api/v2/cloud-files/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudFilesRetrieve operation.
     * @callback module:api/CloudFilesApi~cloudFilesRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this cloud file.
     * @param {module:api/CloudFilesApi~cloudFilesRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudFile}
     */
    cloudFilesRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudFilesRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CloudFile;
      return this.apiClient.callApi(
        '/api/v2/cloud-files/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudFilesUpdate operation.
     * @callback module:api/CloudFilesApi~cloudFilesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this cloud file.
     * @param {module:model/CloudFile} cloudFile 
     * @param {module:api/CloudFilesApi~cloudFilesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudFile}
     */
    cloudFilesUpdate(id, cloudFile, callback) {
      let postBody = cloudFile;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudFilesUpdate");
      }
      // verify the required parameter 'cloudFile' is set
      if (cloudFile === undefined || cloudFile === null) {
        throw new Error("Missing the required parameter 'cloudFile' when calling cloudFilesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CloudFile;
      return this.apiClient.callApi(
        '/api/v2/cloud-files/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
