/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchedThirdPartyTrackReference from '../model/PatchedThirdPartyTrackReference';
import ThirdPartyTrackReference from '../model/ThirdPartyTrackReference';

/**
* ThirdPartyTrackReferences service.
* @module api/ThirdPartyTrackReferencesApi
* @version 2.0.0
*/
export default class ThirdPartyTrackReferencesApi {

    /**
    * Constructs a new ThirdPartyTrackReferencesApi. 
    * @alias module:api/ThirdPartyTrackReferencesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the thirdPartyTrackReferencesCreate operation.
     * @callback module:api/ThirdPartyTrackReferencesApi~thirdPartyTrackReferencesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThirdPartyTrackReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ThirdPartyTrackReference} thirdPartyTrackReference 
     * @param {module:api/ThirdPartyTrackReferencesApi~thirdPartyTrackReferencesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThirdPartyTrackReference}
     */
    thirdPartyTrackReferencesCreate(thirdPartyTrackReference, callback) {
      let postBody = thirdPartyTrackReference;
      // verify the required parameter 'thirdPartyTrackReference' is set
      if (thirdPartyTrackReference === undefined || thirdPartyTrackReference === null) {
        throw new Error("Missing the required parameter 'thirdPartyTrackReference' when calling thirdPartyTrackReferencesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ThirdPartyTrackReference;
      return this.apiClient.callApi(
        '/api/v2/third-party-track-references/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the thirdPartyTrackReferencesDestroy operation.
     * @callback module:api/ThirdPartyTrackReferencesApi~thirdPartyTrackReferencesDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this third party track reference.
     * @param {module:api/ThirdPartyTrackReferencesApi~thirdPartyTrackReferencesDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    thirdPartyTrackReferencesDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thirdPartyTrackReferencesDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/third-party-track-references/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the thirdPartyTrackReferencesList operation.
     * @callback module:api/ThirdPartyTrackReferencesApi~thirdPartyTrackReferencesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ThirdPartyTrackReference>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ThirdPartyTrackReferencesApi~thirdPartyTrackReferencesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ThirdPartyTrackReference>}
     */
    thirdPartyTrackReferencesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ThirdPartyTrackReference];
      return this.apiClient.callApi(
        '/api/v2/third-party-track-references/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the thirdPartyTrackReferencesPartialUpdate operation.
     * @callback module:api/ThirdPartyTrackReferencesApi~thirdPartyTrackReferencesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThirdPartyTrackReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this third party track reference.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedThirdPartyTrackReference} opts.patchedThirdPartyTrackReference 
     * @param {module:api/ThirdPartyTrackReferencesApi~thirdPartyTrackReferencesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThirdPartyTrackReference}
     */
    thirdPartyTrackReferencesPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedThirdPartyTrackReference'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thirdPartyTrackReferencesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ThirdPartyTrackReference;
      return this.apiClient.callApi(
        '/api/v2/third-party-track-references/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the thirdPartyTrackReferencesRetrieve operation.
     * @callback module:api/ThirdPartyTrackReferencesApi~thirdPartyTrackReferencesRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThirdPartyTrackReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this third party track reference.
     * @param {module:api/ThirdPartyTrackReferencesApi~thirdPartyTrackReferencesRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThirdPartyTrackReference}
     */
    thirdPartyTrackReferencesRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thirdPartyTrackReferencesRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ThirdPartyTrackReference;
      return this.apiClient.callApi(
        '/api/v2/third-party-track-references/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the thirdPartyTrackReferencesUpdate operation.
     * @callback module:api/ThirdPartyTrackReferencesApi~thirdPartyTrackReferencesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThirdPartyTrackReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this third party track reference.
     * @param {module:model/ThirdPartyTrackReference} thirdPartyTrackReference 
     * @param {module:api/ThirdPartyTrackReferencesApi~thirdPartyTrackReferencesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThirdPartyTrackReference}
     */
    thirdPartyTrackReferencesUpdate(id, thirdPartyTrackReference, callback) {
      let postBody = thirdPartyTrackReference;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling thirdPartyTrackReferencesUpdate");
      }
      // verify the required parameter 'thirdPartyTrackReference' is set
      if (thirdPartyTrackReference === undefined || thirdPartyTrackReference === null) {
        throw new Error("Missing the required parameter 'thirdPartyTrackReference' when calling thirdPartyTrackReferencesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ThirdPartyTrackReference;
      return this.apiClient.callApi(
        '/api/v2/third-party-track-references/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
