/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Country from '../model/Country';
import PatchedCountry from '../model/PatchedCountry';

/**
* Countries service.
* @module api/CountriesApi
* @version 2.0.0
*/
export default class CountriesApi {

    /**
    * Constructs a new CountriesApi. 
    * @alias module:api/CountriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the countriesCreate operation.
     * @callback module:api/CountriesApi~countriesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Country} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Country} country 
     * @param {module:api/CountriesApi~countriesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Country}
     */
    countriesCreate(country, callback) {
      let postBody = country;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling countriesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Country;
      return this.apiClient.callApi(
        '/api/v2/countries/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the countriesDestroy operation.
     * @callback module:api/CountriesApi~countriesDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} isocode A unique value identifying this country.
     * @param {module:api/CountriesApi~countriesDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    countriesDestroy(isocode, callback) {
      let postBody = null;
      // verify the required parameter 'isocode' is set
      if (isocode === undefined || isocode === null) {
        throw new Error("Missing the required parameter 'isocode' when calling countriesDestroy");
      }

      let pathParams = {
        'isocode': isocode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/countries/{isocode}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the countriesList operation.
     * @callback module:api/CountriesApi~countriesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Country>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/CountriesApi~countriesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Country>}
     */
    countriesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Country];
      return this.apiClient.callApi(
        '/api/v2/countries/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the countriesPartialUpdate operation.
     * @callback module:api/CountriesApi~countriesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Country} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} isocode A unique value identifying this country.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedCountry} opts.patchedCountry 
     * @param {module:api/CountriesApi~countriesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Country}
     */
    countriesPartialUpdate(isocode, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedCountry'];
      // verify the required parameter 'isocode' is set
      if (isocode === undefined || isocode === null) {
        throw new Error("Missing the required parameter 'isocode' when calling countriesPartialUpdate");
      }

      let pathParams = {
        'isocode': isocode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Country;
      return this.apiClient.callApi(
        '/api/v2/countries/{isocode}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the countriesRetrieve operation.
     * @callback module:api/CountriesApi~countriesRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Country} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} isocode A unique value identifying this country.
     * @param {module:api/CountriesApi~countriesRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Country}
     */
    countriesRetrieve(isocode, callback) {
      let postBody = null;
      // verify the required parameter 'isocode' is set
      if (isocode === undefined || isocode === null) {
        throw new Error("Missing the required parameter 'isocode' when calling countriesRetrieve");
      }

      let pathParams = {
        'isocode': isocode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Country;
      return this.apiClient.callApi(
        '/api/v2/countries/{isocode}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the countriesUpdate operation.
     * @callback module:api/CountriesApi~countriesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Country} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} isocode A unique value identifying this country.
     * @param {module:model/Country} country 
     * @param {module:api/CountriesApi~countriesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Country}
     */
    countriesUpdate(isocode, country, callback) {
      let postBody = country;
      // verify the required parameter 'isocode' is set
      if (isocode === undefined || isocode === null) {
        throw new Error("Missing the required parameter 'isocode' when calling countriesUpdate");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling countriesUpdate");
      }

      let pathParams = {
        'isocode': isocode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Country;
      return this.apiClient.callApi(
        '/api/v2/countries/{isocode}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
