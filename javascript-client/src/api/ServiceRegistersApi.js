/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchedServiceRegister from '../model/PatchedServiceRegister';
import ServiceRegister from '../model/ServiceRegister';

/**
* ServiceRegisters service.
* @module api/ServiceRegistersApi
* @version 2.0.0
*/
export default class ServiceRegistersApi {

    /**
    * Constructs a new ServiceRegistersApi. 
    * @alias module:api/ServiceRegistersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the serviceRegistersCreate operation.
     * @callback module:api/ServiceRegistersApi~serviceRegistersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceRegister} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ServiceRegister} serviceRegister 
     * @param {module:api/ServiceRegistersApi~serviceRegistersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceRegister}
     */
    serviceRegistersCreate(serviceRegister, callback) {
      let postBody = serviceRegister;
      // verify the required parameter 'serviceRegister' is set
      if (serviceRegister === undefined || serviceRegister === null) {
        throw new Error("Missing the required parameter 'serviceRegister' when calling serviceRegistersCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ServiceRegister;
      return this.apiClient.callApi(
        '/api/v2/service-registers/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceRegistersDestroy operation.
     * @callback module:api/ServiceRegistersApi~serviceRegistersDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} name A unique value identifying this service register.
     * @param {module:api/ServiceRegistersApi~serviceRegistersDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    serviceRegistersDestroy(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serviceRegistersDestroy");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/service-registers/{name}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceRegistersList operation.
     * @callback module:api/ServiceRegistersApi~serviceRegistersListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ServiceRegister>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ServiceRegistersApi~serviceRegistersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ServiceRegister>}
     */
    serviceRegistersList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ServiceRegister];
      return this.apiClient.callApi(
        '/api/v2/service-registers/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceRegistersPartialUpdate operation.
     * @callback module:api/ServiceRegistersApi~serviceRegistersPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceRegister} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} name A unique value identifying this service register.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedServiceRegister} opts.patchedServiceRegister 
     * @param {module:api/ServiceRegistersApi~serviceRegistersPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceRegister}
     */
    serviceRegistersPartialUpdate(name, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedServiceRegister'];
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serviceRegistersPartialUpdate");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ServiceRegister;
      return this.apiClient.callApi(
        '/api/v2/service-registers/{name}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceRegistersRetrieve operation.
     * @callback module:api/ServiceRegistersApi~serviceRegistersRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceRegister} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} name A unique value identifying this service register.
     * @param {module:api/ServiceRegistersApi~serviceRegistersRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceRegister}
     */
    serviceRegistersRetrieve(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serviceRegistersRetrieve");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceRegister;
      return this.apiClient.callApi(
        '/api/v2/service-registers/{name}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceRegistersUpdate operation.
     * @callback module:api/ServiceRegistersApi~serviceRegistersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceRegister} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} name A unique value identifying this service register.
     * @param {module:model/ServiceRegister} serviceRegister 
     * @param {module:api/ServiceRegistersApi~serviceRegistersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceRegister}
     */
    serviceRegistersUpdate(name, serviceRegister, callback) {
      let postBody = serviceRegister;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serviceRegistersUpdate");
      }
      // verify the required parameter 'serviceRegister' is set
      if (serviceRegister === undefined || serviceRegister === null) {
        throw new Error("Missing the required parameter 'serviceRegister' when calling serviceRegistersUpdate");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ServiceRegister;
      return this.apiClient.callApi(
        '/api/v2/service-registers/{name}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
