# coding: utf-8

"""
    LibreTime API

    Radio Broadcast & Automation Platform  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from libretime_client import schemas  # noqa: F401


class PatchedImportedPodcast(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.IntSchema
            override_album = schemas.BoolSchema
            auto_ingest = schemas.BoolSchema
            
            
            class auto_ingested_at(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'auto_ingested_at':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            podcast = schemas.IntSchema
            __annotations__ = {
                "id": id,
                "override_album": override_album,
                "auto_ingest": auto_ingest,
                "auto_ingested_at": auto_ingested_at,
                "podcast": podcast,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["override_album"]) -> MetaOapg.properties.override_album: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_ingest"]) -> MetaOapg.properties.auto_ingest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_ingested_at"]) -> MetaOapg.properties.auto_ingested_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["podcast"]) -> MetaOapg.properties.podcast: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "override_album", "auto_ingest", "auto_ingested_at", "podcast", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["override_album"]) -> typing.Union[MetaOapg.properties.override_album, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_ingest"]) -> typing.Union[MetaOapg.properties.auto_ingest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_ingested_at"]) -> typing.Union[MetaOapg.properties.auto_ingested_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["podcast"]) -> typing.Union[MetaOapg.properties.podcast, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "override_album", "auto_ingest", "auto_ingested_at", "podcast", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        override_album: typing.Union[MetaOapg.properties.override_album, bool, schemas.Unset] = schemas.unset,
        auto_ingest: typing.Union[MetaOapg.properties.auto_ingest, bool, schemas.Unset] = schemas.unset,
        auto_ingested_at: typing.Union[MetaOapg.properties.auto_ingested_at, None, str, datetime, schemas.Unset] = schemas.unset,
        podcast: typing.Union[MetaOapg.properties.podcast, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PatchedImportedPodcast':
        return super().__new__(
            cls,
            *_args,
            id=id,
            override_album=override_album,
            auto_ingest=auto_ingest,
            auto_ingested_at=auto_ingested_at,
            podcast=podcast,
            _configuration=_configuration,
            **kwargs,
        )
