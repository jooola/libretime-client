# coding: utf-8

"""
    LibreTime API

    Radio Broadcast & Automation Platform  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from libretime_client import schemas  # noqa: F401


class Schedule(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "starts_at",
            "instance",
            "broadcasted",
            "ends_at",
            "id",
            "position",
            "cue_in",
            "cue_out",
        }
        
        class properties:
            id = schemas.IntSchema
            cue_out = schemas.StrSchema
            ends_at = schemas.DateTimeSchema
            starts_at = schemas.DateTimeSchema
            cue_in = schemas.StrSchema
            
            
            class position(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 2147483647
                    inclusive_minimum = -2147483648
            
            
            class broadcasted(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 32767
                    inclusive_minimum = -32768
            instance = schemas.IntSchema
            
            
            class length(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'length':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class fade_in(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fade_in':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class fade_out(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fade_out':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class position_status(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 32767
                    inclusive_minimum = -32768
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            PositionStatusEnum,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'position_status':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class played(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'played':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class file(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'file':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class stream(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'stream':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "id": id,
                "cue_out": cue_out,
                "ends_at": ends_at,
                "starts_at": starts_at,
                "cue_in": cue_in,
                "position": position,
                "broadcasted": broadcasted,
                "instance": instance,
                "length": length,
                "fade_in": fade_in,
                "fade_out": fade_out,
                "position_status": position_status,
                "played": played,
                "file": file,
                "stream": stream,
            }
    
    starts_at: MetaOapg.properties.starts_at
    instance: MetaOapg.properties.instance
    broadcasted: MetaOapg.properties.broadcasted
    ends_at: MetaOapg.properties.ends_at
    id: MetaOapg.properties.id
    position: MetaOapg.properties.position
    cue_in: MetaOapg.properties.cue_in
    cue_out: MetaOapg.properties.cue_out
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cue_out"]) -> MetaOapg.properties.cue_out: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ends_at"]) -> MetaOapg.properties.ends_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["starts_at"]) -> MetaOapg.properties.starts_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cue_in"]) -> MetaOapg.properties.cue_in: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["position"]) -> MetaOapg.properties.position: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["broadcasted"]) -> MetaOapg.properties.broadcasted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instance"]) -> MetaOapg.properties.instance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["length"]) -> MetaOapg.properties.length: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fade_in"]) -> MetaOapg.properties.fade_in: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fade_out"]) -> MetaOapg.properties.fade_out: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["position_status"]) -> MetaOapg.properties.position_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["played"]) -> MetaOapg.properties.played: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file"]) -> MetaOapg.properties.file: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stream"]) -> MetaOapg.properties.stream: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "cue_out", "ends_at", "starts_at", "cue_in", "position", "broadcasted", "instance", "length", "fade_in", "fade_out", "position_status", "played", "file", "stream", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cue_out"]) -> MetaOapg.properties.cue_out: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ends_at"]) -> MetaOapg.properties.ends_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["starts_at"]) -> MetaOapg.properties.starts_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cue_in"]) -> MetaOapg.properties.cue_in: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["position"]) -> MetaOapg.properties.position: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["broadcasted"]) -> MetaOapg.properties.broadcasted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instance"]) -> MetaOapg.properties.instance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["length"]) -> typing.Union[MetaOapg.properties.length, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fade_in"]) -> typing.Union[MetaOapg.properties.fade_in, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fade_out"]) -> typing.Union[MetaOapg.properties.fade_out, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["position_status"]) -> typing.Union[MetaOapg.properties.position_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["played"]) -> typing.Union[MetaOapg.properties.played, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file"]) -> typing.Union[MetaOapg.properties.file, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stream"]) -> typing.Union[MetaOapg.properties.stream, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "cue_out", "ends_at", "starts_at", "cue_in", "position", "broadcasted", "instance", "length", "fade_in", "fade_out", "position_status", "played", "file", "stream", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        starts_at: typing.Union[MetaOapg.properties.starts_at, str, datetime, ],
        instance: typing.Union[MetaOapg.properties.instance, decimal.Decimal, int, ],
        broadcasted: typing.Union[MetaOapg.properties.broadcasted, decimal.Decimal, int, ],
        ends_at: typing.Union[MetaOapg.properties.ends_at, str, datetime, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        position: typing.Union[MetaOapg.properties.position, decimal.Decimal, int, ],
        cue_in: typing.Union[MetaOapg.properties.cue_in, str, ],
        cue_out: typing.Union[MetaOapg.properties.cue_out, str, ],
        length: typing.Union[MetaOapg.properties.length, None, str, schemas.Unset] = schemas.unset,
        fade_in: typing.Union[MetaOapg.properties.fade_in, None, str, schemas.Unset] = schemas.unset,
        fade_out: typing.Union[MetaOapg.properties.fade_out, None, str, schemas.Unset] = schemas.unset,
        position_status: typing.Union[MetaOapg.properties.position_status, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        played: typing.Union[MetaOapg.properties.played, None, bool, schemas.Unset] = schemas.unset,
        file: typing.Union[MetaOapg.properties.file, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        stream: typing.Union[MetaOapg.properties.stream, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Schedule':
        return super().__new__(
            cls,
            *_args,
            starts_at=starts_at,
            instance=instance,
            broadcasted=broadcasted,
            ends_at=ends_at,
            id=id,
            position=position,
            cue_in=cue_in,
            cue_out=cue_out,
            length=length,
            fade_in=fade_in,
            fade_out=fade_out,
            position_status=position_status,
            played=played,
            file=file,
            stream=stream,
            _configuration=_configuration,
            **kwargs,
        )

from libretime_client.model.position_status_enum import PositionStatusEnum
