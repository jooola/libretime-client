# coding: utf-8

"""
    LibreTime API

    Radio Broadcast & Automation Platform  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from libretime_client import schemas  # noqa: F401


class PatchedPodcastEpisode(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.IntSchema
            published_at = schemas.DateTimeSchema
            
            
            class download_url(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 4096
            
            
            class episode_guid(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 4096
            
            
            class episode_title(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 4096
            episode_description = schemas.StrSchema
            podcast = schemas.IntSchema
            
            
            class file(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'file':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "id": id,
                "published_at": published_at,
                "download_url": download_url,
                "episode_guid": episode_guid,
                "episode_title": episode_title,
                "episode_description": episode_description,
                "podcast": podcast,
                "file": file,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["published_at"]) -> MetaOapg.properties.published_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["download_url"]) -> MetaOapg.properties.download_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["episode_guid"]) -> MetaOapg.properties.episode_guid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["episode_title"]) -> MetaOapg.properties.episode_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["episode_description"]) -> MetaOapg.properties.episode_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["podcast"]) -> MetaOapg.properties.podcast: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file"]) -> MetaOapg.properties.file: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "published_at", "download_url", "episode_guid", "episode_title", "episode_description", "podcast", "file", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["published_at"]) -> typing.Union[MetaOapg.properties.published_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["download_url"]) -> typing.Union[MetaOapg.properties.download_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["episode_guid"]) -> typing.Union[MetaOapg.properties.episode_guid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["episode_title"]) -> typing.Union[MetaOapg.properties.episode_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["episode_description"]) -> typing.Union[MetaOapg.properties.episode_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["podcast"]) -> typing.Union[MetaOapg.properties.podcast, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file"]) -> typing.Union[MetaOapg.properties.file, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "published_at", "download_url", "episode_guid", "episode_title", "episode_description", "podcast", "file", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        published_at: typing.Union[MetaOapg.properties.published_at, str, datetime, schemas.Unset] = schemas.unset,
        download_url: typing.Union[MetaOapg.properties.download_url, str, schemas.Unset] = schemas.unset,
        episode_guid: typing.Union[MetaOapg.properties.episode_guid, str, schemas.Unset] = schemas.unset,
        episode_title: typing.Union[MetaOapg.properties.episode_title, str, schemas.Unset] = schemas.unset,
        episode_description: typing.Union[MetaOapg.properties.episode_description, str, schemas.Unset] = schemas.unset,
        podcast: typing.Union[MetaOapg.properties.podcast, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        file: typing.Union[MetaOapg.properties.file, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PatchedPodcastEpisode':
        return super().__new__(
            cls,
            *_args,
            id=id,
            published_at=published_at,
            download_url=download_url,
            episode_guid=episode_guid,
            episode_title=episode_title,
            episode_description=episode_description,
            podcast=podcast,
            file=file,
            _configuration=_configuration,
            **kwargs,
        )
