# coding: utf-8

"""
    LibreTime API

    Radio Broadcast & Automation Platform  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from libretime_client import schemas  # noqa: F401


class PatchedFile(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.IntSchema
            
            
            class import_status(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            PlaylistContentKindEnum,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'import_status':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class filepath(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'filepath':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class size(
                schemas.IntSchema
            ):
                pass
            
            
            class exists(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'exists':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class mime(
                schemas.StrSchema
            ):
                pass
            
            
            class md5(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'md5':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class hidden(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hidden':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class accessed(
                schemas.IntSchema
            ):
                pass
            
            
            class scheduled(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'scheduled':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class part_of_list(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'part_of_list':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class created_at(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'created_at':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class updated_at(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'updated_at':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class last_played_at(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_played_at':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class bit_rate(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bit_rate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class sample_rate(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sample_rate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class format(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'format':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class channels(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'channels':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class length(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'length':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class bpm(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bpm':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class replay_gain(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'decimal'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'replay_gain':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class cue_in(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cue_in':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class cue_out(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cue_out':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            
            
            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class artwork(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'artwork':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class artist_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'artist_name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class artist_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'artist_url':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class original_artist(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'original_artist':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class album_title(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'album_title':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class track_title(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'track_title':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class genre(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'genre':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class mood(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mood':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class date(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'date':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class track_number(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'track_number':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class disc_number(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'disc_number':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class comment(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'comment':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class language(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'language':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class label(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'label':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class copyright(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'copyright':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class composer(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'composer':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class conductor(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'conductor':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class orchestra(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'orchestra':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class encoder(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'encoder':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class encoded_by(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'encoded_by':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class isrc(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isrc':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class lyrics(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lyrics':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class lyricist(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lyricist':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class original_lyricist(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'original_lyricist':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class subject(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subject':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class contributor(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'contributor':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class rating(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'rating':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'url':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class info_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'info_url':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class audio_source_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'audio_source_url':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class buy_this_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'buy_this_url':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class catalog_number(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'catalog_number':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class radio_station_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'radio_station_name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class radio_station_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'radio_station_url':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class report_datetime(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'report_datetime':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class report_location(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'report_location':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class report_organization(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'report_organization':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class library(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'library':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class owner(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'owner':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class edited_by(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'edited_by':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "id": id,
                "import_status": import_status,
                "filepath": filepath,
                "size": size,
                "exists": exists,
                "mime": mime,
                "md5": md5,
                "hidden": hidden,
                "accessed": accessed,
                "scheduled": scheduled,
                "part_of_list": part_of_list,
                "created_at": created_at,
                "updated_at": updated_at,
                "last_played_at": last_played_at,
                "bit_rate": bit_rate,
                "sample_rate": sample_rate,
                "format": format,
                "channels": channels,
                "length": length,
                "bpm": bpm,
                "replay_gain": replay_gain,
                "cue_in": cue_in,
                "cue_out": cue_out,
                "name": name,
                "description": description,
                "artwork": artwork,
                "artist_name": artist_name,
                "artist_url": artist_url,
                "original_artist": original_artist,
                "album_title": album_title,
                "track_title": track_title,
                "genre": genre,
                "mood": mood,
                "date": date,
                "track_number": track_number,
                "disc_number": disc_number,
                "comment": comment,
                "language": language,
                "label": label,
                "copyright": copyright,
                "composer": composer,
                "conductor": conductor,
                "orchestra": orchestra,
                "encoder": encoder,
                "encoded_by": encoded_by,
                "isrc": isrc,
                "lyrics": lyrics,
                "lyricist": lyricist,
                "original_lyricist": original_lyricist,
                "subject": subject,
                "contributor": contributor,
                "rating": rating,
                "url": url,
                "info_url": info_url,
                "audio_source_url": audio_source_url,
                "buy_this_url": buy_this_url,
                "catalog_number": catalog_number,
                "radio_station_name": radio_station_name,
                "radio_station_url": radio_station_url,
                "report_datetime": report_datetime,
                "report_location": report_location,
                "report_organization": report_organization,
                "library": library,
                "owner": owner,
                "edited_by": edited_by,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["import_status"]) -> MetaOapg.properties.import_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filepath"]) -> MetaOapg.properties.filepath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exists"]) -> MetaOapg.properties.exists: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mime"]) -> MetaOapg.properties.mime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["md5"]) -> MetaOapg.properties.md5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hidden"]) -> MetaOapg.properties.hidden: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accessed"]) -> MetaOapg.properties.accessed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduled"]) -> MetaOapg.properties.scheduled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["part_of_list"]) -> MetaOapg.properties.part_of_list: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_played_at"]) -> MetaOapg.properties.last_played_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bit_rate"]) -> MetaOapg.properties.bit_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sample_rate"]) -> MetaOapg.properties.sample_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channels"]) -> MetaOapg.properties.channels: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["length"]) -> MetaOapg.properties.length: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bpm"]) -> MetaOapg.properties.bpm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replay_gain"]) -> MetaOapg.properties.replay_gain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cue_in"]) -> MetaOapg.properties.cue_in: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cue_out"]) -> MetaOapg.properties.cue_out: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["artwork"]) -> MetaOapg.properties.artwork: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["artist_name"]) -> MetaOapg.properties.artist_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["artist_url"]) -> MetaOapg.properties.artist_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["original_artist"]) -> MetaOapg.properties.original_artist: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["album_title"]) -> MetaOapg.properties.album_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["track_title"]) -> MetaOapg.properties.track_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["genre"]) -> MetaOapg.properties.genre: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mood"]) -> MetaOapg.properties.mood: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["track_number"]) -> MetaOapg.properties.track_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disc_number"]) -> MetaOapg.properties.disc_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["copyright"]) -> MetaOapg.properties.copyright: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["composer"]) -> MetaOapg.properties.composer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conductor"]) -> MetaOapg.properties.conductor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orchestra"]) -> MetaOapg.properties.orchestra: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encoder"]) -> MetaOapg.properties.encoder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encoded_by"]) -> MetaOapg.properties.encoded_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isrc"]) -> MetaOapg.properties.isrc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lyrics"]) -> MetaOapg.properties.lyrics: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lyricist"]) -> MetaOapg.properties.lyricist: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["original_lyricist"]) -> MetaOapg.properties.original_lyricist: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subject"]) -> MetaOapg.properties.subject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contributor"]) -> MetaOapg.properties.contributor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rating"]) -> MetaOapg.properties.rating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["info_url"]) -> MetaOapg.properties.info_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["audio_source_url"]) -> MetaOapg.properties.audio_source_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buy_this_url"]) -> MetaOapg.properties.buy_this_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["catalog_number"]) -> MetaOapg.properties.catalog_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["radio_station_name"]) -> MetaOapg.properties.radio_station_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["radio_station_url"]) -> MetaOapg.properties.radio_station_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["report_datetime"]) -> MetaOapg.properties.report_datetime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["report_location"]) -> MetaOapg.properties.report_location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["report_organization"]) -> MetaOapg.properties.report_organization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["library"]) -> MetaOapg.properties.library: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["edited_by"]) -> MetaOapg.properties.edited_by: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "import_status", "filepath", "size", "exists", "mime", "md5", "hidden", "accessed", "scheduled", "part_of_list", "created_at", "updated_at", "last_played_at", "bit_rate", "sample_rate", "format", "channels", "length", "bpm", "replay_gain", "cue_in", "cue_out", "name", "description", "artwork", "artist_name", "artist_url", "original_artist", "album_title", "track_title", "genre", "mood", "date", "track_number", "disc_number", "comment", "language", "label", "copyright", "composer", "conductor", "orchestra", "encoder", "encoded_by", "isrc", "lyrics", "lyricist", "original_lyricist", "subject", "contributor", "rating", "url", "info_url", "audio_source_url", "buy_this_url", "catalog_number", "radio_station_name", "radio_station_url", "report_datetime", "report_location", "report_organization", "library", "owner", "edited_by", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["import_status"]) -> typing.Union[MetaOapg.properties.import_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filepath"]) -> typing.Union[MetaOapg.properties.filepath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size"]) -> typing.Union[MetaOapg.properties.size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exists"]) -> typing.Union[MetaOapg.properties.exists, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mime"]) -> typing.Union[MetaOapg.properties.mime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["md5"]) -> typing.Union[MetaOapg.properties.md5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hidden"]) -> typing.Union[MetaOapg.properties.hidden, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accessed"]) -> typing.Union[MetaOapg.properties.accessed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduled"]) -> typing.Union[MetaOapg.properties.scheduled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["part_of_list"]) -> typing.Union[MetaOapg.properties.part_of_list, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_played_at"]) -> typing.Union[MetaOapg.properties.last_played_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bit_rate"]) -> typing.Union[MetaOapg.properties.bit_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sample_rate"]) -> typing.Union[MetaOapg.properties.sample_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["format"]) -> typing.Union[MetaOapg.properties.format, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channels"]) -> typing.Union[MetaOapg.properties.channels, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["length"]) -> typing.Union[MetaOapg.properties.length, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bpm"]) -> typing.Union[MetaOapg.properties.bpm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replay_gain"]) -> typing.Union[MetaOapg.properties.replay_gain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cue_in"]) -> typing.Union[MetaOapg.properties.cue_in, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cue_out"]) -> typing.Union[MetaOapg.properties.cue_out, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["artwork"]) -> typing.Union[MetaOapg.properties.artwork, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["artist_name"]) -> typing.Union[MetaOapg.properties.artist_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["artist_url"]) -> typing.Union[MetaOapg.properties.artist_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["original_artist"]) -> typing.Union[MetaOapg.properties.original_artist, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["album_title"]) -> typing.Union[MetaOapg.properties.album_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["track_title"]) -> typing.Union[MetaOapg.properties.track_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["genre"]) -> typing.Union[MetaOapg.properties.genre, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mood"]) -> typing.Union[MetaOapg.properties.mood, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["track_number"]) -> typing.Union[MetaOapg.properties.track_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disc_number"]) -> typing.Union[MetaOapg.properties.disc_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> typing.Union[MetaOapg.properties.language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["copyright"]) -> typing.Union[MetaOapg.properties.copyright, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["composer"]) -> typing.Union[MetaOapg.properties.composer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conductor"]) -> typing.Union[MetaOapg.properties.conductor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orchestra"]) -> typing.Union[MetaOapg.properties.orchestra, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encoder"]) -> typing.Union[MetaOapg.properties.encoder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encoded_by"]) -> typing.Union[MetaOapg.properties.encoded_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isrc"]) -> typing.Union[MetaOapg.properties.isrc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lyrics"]) -> typing.Union[MetaOapg.properties.lyrics, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lyricist"]) -> typing.Union[MetaOapg.properties.lyricist, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["original_lyricist"]) -> typing.Union[MetaOapg.properties.original_lyricist, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subject"]) -> typing.Union[MetaOapg.properties.subject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contributor"]) -> typing.Union[MetaOapg.properties.contributor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rating"]) -> typing.Union[MetaOapg.properties.rating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["info_url"]) -> typing.Union[MetaOapg.properties.info_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["audio_source_url"]) -> typing.Union[MetaOapg.properties.audio_source_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buy_this_url"]) -> typing.Union[MetaOapg.properties.buy_this_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["catalog_number"]) -> typing.Union[MetaOapg.properties.catalog_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["radio_station_name"]) -> typing.Union[MetaOapg.properties.radio_station_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["radio_station_url"]) -> typing.Union[MetaOapg.properties.radio_station_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["report_datetime"]) -> typing.Union[MetaOapg.properties.report_datetime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["report_location"]) -> typing.Union[MetaOapg.properties.report_location, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["report_organization"]) -> typing.Union[MetaOapg.properties.report_organization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["library"]) -> typing.Union[MetaOapg.properties.library, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union[MetaOapg.properties.owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["edited_by"]) -> typing.Union[MetaOapg.properties.edited_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "import_status", "filepath", "size", "exists", "mime", "md5", "hidden", "accessed", "scheduled", "part_of_list", "created_at", "updated_at", "last_played_at", "bit_rate", "sample_rate", "format", "channels", "length", "bpm", "replay_gain", "cue_in", "cue_out", "name", "description", "artwork", "artist_name", "artist_url", "original_artist", "album_title", "track_title", "genre", "mood", "date", "track_number", "disc_number", "comment", "language", "label", "copyright", "composer", "conductor", "orchestra", "encoder", "encoded_by", "isrc", "lyrics", "lyricist", "original_lyricist", "subject", "contributor", "rating", "url", "info_url", "audio_source_url", "buy_this_url", "catalog_number", "radio_station_name", "radio_station_url", "report_datetime", "report_location", "report_organization", "library", "owner", "edited_by", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        import_status: typing.Union[MetaOapg.properties.import_status, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        filepath: typing.Union[MetaOapg.properties.filepath, None, str, schemas.Unset] = schemas.unset,
        size: typing.Union[MetaOapg.properties.size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        exists: typing.Union[MetaOapg.properties.exists, None, bool, schemas.Unset] = schemas.unset,
        mime: typing.Union[MetaOapg.properties.mime, str, schemas.Unset] = schemas.unset,
        md5: typing.Union[MetaOapg.properties.md5, None, str, schemas.Unset] = schemas.unset,
        hidden: typing.Union[MetaOapg.properties.hidden, None, bool, schemas.Unset] = schemas.unset,
        accessed: typing.Union[MetaOapg.properties.accessed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        scheduled: typing.Union[MetaOapg.properties.scheduled, None, bool, schemas.Unset] = schemas.unset,
        part_of_list: typing.Union[MetaOapg.properties.part_of_list, None, bool, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, None, str, datetime, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, None, str, datetime, schemas.Unset] = schemas.unset,
        last_played_at: typing.Union[MetaOapg.properties.last_played_at, None, str, datetime, schemas.Unset] = schemas.unset,
        bit_rate: typing.Union[MetaOapg.properties.bit_rate, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sample_rate: typing.Union[MetaOapg.properties.sample_rate, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        format: typing.Union[MetaOapg.properties.format, None, str, schemas.Unset] = schemas.unset,
        channels: typing.Union[MetaOapg.properties.channels, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        length: typing.Union[MetaOapg.properties.length, None, str, schemas.Unset] = schemas.unset,
        bpm: typing.Union[MetaOapg.properties.bpm, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        replay_gain: typing.Union[MetaOapg.properties.replay_gain, None, str, schemas.Unset] = schemas.unset,
        cue_in: typing.Union[MetaOapg.properties.cue_in, None, str, schemas.Unset] = schemas.unset,
        cue_out: typing.Union[MetaOapg.properties.cue_out, None, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, None, str, schemas.Unset] = schemas.unset,
        artwork: typing.Union[MetaOapg.properties.artwork, None, str, schemas.Unset] = schemas.unset,
        artist_name: typing.Union[MetaOapg.properties.artist_name, None, str, schemas.Unset] = schemas.unset,
        artist_url: typing.Union[MetaOapg.properties.artist_url, None, str, schemas.Unset] = schemas.unset,
        original_artist: typing.Union[MetaOapg.properties.original_artist, None, str, schemas.Unset] = schemas.unset,
        album_title: typing.Union[MetaOapg.properties.album_title, None, str, schemas.Unset] = schemas.unset,
        track_title: typing.Union[MetaOapg.properties.track_title, None, str, schemas.Unset] = schemas.unset,
        genre: typing.Union[MetaOapg.properties.genre, None, str, schemas.Unset] = schemas.unset,
        mood: typing.Union[MetaOapg.properties.mood, None, str, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, None, str, schemas.Unset] = schemas.unset,
        track_number: typing.Union[MetaOapg.properties.track_number, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        disc_number: typing.Union[MetaOapg.properties.disc_number, None, str, schemas.Unset] = schemas.unset,
        comment: typing.Union[MetaOapg.properties.comment, None, str, schemas.Unset] = schemas.unset,
        language: typing.Union[MetaOapg.properties.language, None, str, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, None, str, schemas.Unset] = schemas.unset,
        copyright: typing.Union[MetaOapg.properties.copyright, None, str, schemas.Unset] = schemas.unset,
        composer: typing.Union[MetaOapg.properties.composer, None, str, schemas.Unset] = schemas.unset,
        conductor: typing.Union[MetaOapg.properties.conductor, None, str, schemas.Unset] = schemas.unset,
        orchestra: typing.Union[MetaOapg.properties.orchestra, None, str, schemas.Unset] = schemas.unset,
        encoder: typing.Union[MetaOapg.properties.encoder, None, str, schemas.Unset] = schemas.unset,
        encoded_by: typing.Union[MetaOapg.properties.encoded_by, None, str, schemas.Unset] = schemas.unset,
        isrc: typing.Union[MetaOapg.properties.isrc, None, str, schemas.Unset] = schemas.unset,
        lyrics: typing.Union[MetaOapg.properties.lyrics, None, str, schemas.Unset] = schemas.unset,
        lyricist: typing.Union[MetaOapg.properties.lyricist, None, str, schemas.Unset] = schemas.unset,
        original_lyricist: typing.Union[MetaOapg.properties.original_lyricist, None, str, schemas.Unset] = schemas.unset,
        subject: typing.Union[MetaOapg.properties.subject, None, str, schemas.Unset] = schemas.unset,
        contributor: typing.Union[MetaOapg.properties.contributor, None, str, schemas.Unset] = schemas.unset,
        rating: typing.Union[MetaOapg.properties.rating, None, str, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, None, str, schemas.Unset] = schemas.unset,
        info_url: typing.Union[MetaOapg.properties.info_url, None, str, schemas.Unset] = schemas.unset,
        audio_source_url: typing.Union[MetaOapg.properties.audio_source_url, None, str, schemas.Unset] = schemas.unset,
        buy_this_url: typing.Union[MetaOapg.properties.buy_this_url, None, str, schemas.Unset] = schemas.unset,
        catalog_number: typing.Union[MetaOapg.properties.catalog_number, None, str, schemas.Unset] = schemas.unset,
        radio_station_name: typing.Union[MetaOapg.properties.radio_station_name, None, str, schemas.Unset] = schemas.unset,
        radio_station_url: typing.Union[MetaOapg.properties.radio_station_url, None, str, schemas.Unset] = schemas.unset,
        report_datetime: typing.Union[MetaOapg.properties.report_datetime, None, str, schemas.Unset] = schemas.unset,
        report_location: typing.Union[MetaOapg.properties.report_location, None, str, schemas.Unset] = schemas.unset,
        report_organization: typing.Union[MetaOapg.properties.report_organization, None, str, schemas.Unset] = schemas.unset,
        library: typing.Union[MetaOapg.properties.library, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        owner: typing.Union[MetaOapg.properties.owner, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        edited_by: typing.Union[MetaOapg.properties.edited_by, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PatchedFile':
        return super().__new__(
            cls,
            *_args,
            id=id,
            import_status=import_status,
            filepath=filepath,
            size=size,
            exists=exists,
            mime=mime,
            md5=md5,
            hidden=hidden,
            accessed=accessed,
            scheduled=scheduled,
            part_of_list=part_of_list,
            created_at=created_at,
            updated_at=updated_at,
            last_played_at=last_played_at,
            bit_rate=bit_rate,
            sample_rate=sample_rate,
            format=format,
            channels=channels,
            length=length,
            bpm=bpm,
            replay_gain=replay_gain,
            cue_in=cue_in,
            cue_out=cue_out,
            name=name,
            description=description,
            artwork=artwork,
            artist_name=artist_name,
            artist_url=artist_url,
            original_artist=original_artist,
            album_title=album_title,
            track_title=track_title,
            genre=genre,
            mood=mood,
            date=date,
            track_number=track_number,
            disc_number=disc_number,
            comment=comment,
            language=language,
            label=label,
            copyright=copyright,
            composer=composer,
            conductor=conductor,
            orchestra=orchestra,
            encoder=encoder,
            encoded_by=encoded_by,
            isrc=isrc,
            lyrics=lyrics,
            lyricist=lyricist,
            original_lyricist=original_lyricist,
            subject=subject,
            contributor=contributor,
            rating=rating,
            url=url,
            info_url=info_url,
            audio_source_url=audio_source_url,
            buy_this_url=buy_this_url,
            catalog_number=catalog_number,
            radio_station_name=radio_station_name,
            radio_station_url=radio_station_url,
            report_datetime=report_datetime,
            report_location=report_location,
            report_organization=report_organization,
            library=library,
            owner=owner,
            edited_by=edited_by,
            _configuration=_configuration,
            **kwargs,
        )

from libretime_client.model.playlist_content_kind_enum import PlaylistContentKindEnum
