# coding: utf-8

"""
    LibreTime API

    Radio Broadcast & Automation Platform  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from libretime_client import schemas  # noqa: F401


class StreamPreferences(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "message_offline",
            "message_format",
            "input_fade_transition",
        }
        
        class properties:
            input_fade_transition = schemas.Float64Schema
            message_format = schemas.IntSchema
            message_offline = schemas.StrSchema
            __annotations__ = {
                "input_fade_transition": input_fade_transition,
                "message_format": message_format,
                "message_offline": message_offline,
            }
    
    message_offline: MetaOapg.properties.message_offline
    message_format: MetaOapg.properties.message_format
    input_fade_transition: MetaOapg.properties.input_fade_transition
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["input_fade_transition"]) -> MetaOapg.properties.input_fade_transition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message_format"]) -> MetaOapg.properties.message_format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message_offline"]) -> MetaOapg.properties.message_offline: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["input_fade_transition", "message_format", "message_offline", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["input_fade_transition"]) -> MetaOapg.properties.input_fade_transition: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message_format"]) -> MetaOapg.properties.message_format: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message_offline"]) -> MetaOapg.properties.message_offline: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["input_fade_transition", "message_format", "message_offline", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        message_offline: typing.Union[MetaOapg.properties.message_offline, str, ],
        message_format: typing.Union[MetaOapg.properties.message_format, decimal.Decimal, int, ],
        input_fade_transition: typing.Union[MetaOapg.properties.input_fade_transition, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StreamPreferences':
        return super().__new__(
            cls,
            *_args,
            message_offline=message_offline,
            message_format=message_format,
            input_fade_transition=input_fade_transition,
            _configuration=_configuration,
            **kwargs,
        )
